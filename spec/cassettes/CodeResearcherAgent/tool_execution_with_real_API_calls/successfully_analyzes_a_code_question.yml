---
http_interactions:
- request:
    method: post
    uri: https://openrouter.ai/api/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"openai/gpt-4.1","messages":[{"role":"user","content":"Analyze
        the following code-related research question:\n\nQUESTION: How to implement
        a Ruby DSL?\n\nIdentify:\n1. Core technical concepts\n2. Relevant programming
        languages/frameworks\n3. Type of answer sought (example, explanation, comparison)\n4.
        What a good answer would include\n\nFORMAT:\nCORE CONCEPTS:\n- [Concept 1]\n\nRELEVANT
        TECHNOLOGIES:\n- [Language/Framework 1]\n\nANSWER TYPE:\n[Type]\n\nGOOD ANSWER
        INCLUDES:\n- [Element 1]\n"}],"temperature":0.3}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPEN_ROUTER_API_KEY>
      Http-Referer:
      - https://localhost:3000
      X-Title:
      - DoubleAgent
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 14 Apr 2025 23:11:22 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      X-Clerk-Auth-Message:
      - Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid,
        token-carrier=header)
      X-Clerk-Auth-Reason:
      - token-invalid
      X-Clerk-Auth-Status:
      - signed-out
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - 9306e1c6496aad06-MSP
    body:
      encoding: ASCII-8BIT
      string: "\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n{\"id\":\"gen-1744672282-IWlE5frKP9dGK8jajuqD\",\"provider\":\"OpenAI\",\"model\":\"openai/gpt-4.1\",\"object\":\"chat.completion\",\"created\":1744672282,\"choices\":[{\"logprobs\":null,\"finish_reason\":\"stop\",\"native_finish_reason\":\"stop\",\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"CORE
        CONCEPTS:\\n- Domain-Specific Language (DSL)\\n- Ruby metaprogramming\\n-
        Syntax design\\n- Internal vs. external DSLs\\n- Method_missing, define_method,
        and other Ruby dynamic features\\n\\nRELEVANT TECHNOLOGIES:\\n- Ruby\\n\\nANSWER
        TYPE:\\nExample and explanation\\n\\nGOOD ANSWER INCLUDES:\\n- Definition
        of what a DSL is, specifically in Ruby\\n- Explanation of internal vs. external
        DSLs with focus on internal DSLs in Ruby\\n- Step-by-step example of implementing
        a simple Ruby DSL (e.g., for configuration or describing tasks)\\n- Use of
        Ruby metaprogramming techniques (like method_missing, blocks, instance_eval)\\n-
        Discussion of best practices and potential pitfalls\\n- References to real-world
        Ruby DSLs (e.g., Rake, Rails routes, or ActiveRecord migrations)\",\"refusal\":null,\"reasoning\":null}}],\"system_fingerprint\":\"fp_267d0ae600\",\"usage\":{\"prompt_tokens\":108,\"completion_tokens\":171,\"total_tokens\":279,\"prompt_tokens_details\":{\"cached_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0}}}"
  recorded_at: Mon, 14 Apr 2025 23:11:25 GMT
recorded_with: VCR 6.3.1
